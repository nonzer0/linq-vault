import * as React from "react";
import { onValue, push, ref, serverTimestamp, set } from "firebase/database";
import { useFormik } from "formik";
import { useDatabase } from "reactfire";
import Button from "@mui/material/Button";
// import TextField from '@mui/material/TextField';
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogTitle from "@mui/material/DialogTitle";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import * as yup from "yup";

import { LibTextField as TextField } from "../ui_lib/LibTextField";
import { Link, LinkRecords } from "../../types/types";

import styles from "../../styles/Home.module.css";

/*
const theme = createTheme({
  components: {
    // Name of the component ‚öõÔ∏è
    MuiButtonBase: {
      defaultProps: {
        // The default props to change
        disableRipple: true, // No more ripple, on the whole application üí£!
      },
    },
  },
});
*/

export function AddBookmarkModal() {
  const db = useDatabase();

  const initLink = { url: "", title: "", tags: [], archived: false, id: "" };
  const [newLink, setNewLink] = React.useState<Link>(initLink);
  const [links, setLinks] = React.useState<LinkRecords | undefined>(undefined);

  const saveBookmark = (event: any) => {
    // event.preventDefault();
    const { url, title, tags } = newLink;
    const bookmarkListRef = ref(db, `/bookmarks`);
    const newBookmarkRef = push(bookmarkListRef);
    set(newBookmarkRef, {
      url,
      title,
      tags,
      createdAt: serverTimestamp(),
      archived: false,
    })
      .then(() => {
        onValue(bookmarkListRef, (snapshot) => {
          setLinks(snapshot.val());
          setNewLink(initLink);
        });
      })
      .catch((e: any) => {
        throw new Error(`oops ${e}`);
      });
  };

  function handleChange(e: any) {
    const { value } = e.target;
    console.log("ch");
    if (e.target.name === "tags") {
      const tags = e.target.value.split(",").map((tag: string) => tag.trim());
      setNewLink({
        ...newLink,
        [e.target.name]: tags,
      });
    } else {
      setNewLink({
        ...newLink,
        [e.target.name]: value,
      });
    }
  }

  // const validationSchema = yup.object({
  //   url: yup
  //     .string()
  //     .email("Enter a valid email")
  //     .required("Email is required"),
  //   title: yup.string().required("Title required"),
  //   tags: yup.string().required("One or more tags required"),
  // });

  const formik = useFormik({
    initialValues: {
      url: "",
      title: "",
      tags: "",
    },
    // validationSchema: validationSchema,
    onSubmit: (values) => {
      console.log(values);
      saveBookmark(values);
    },
  });

  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <div>
      <Button variant="outlined" onClick={handleClickOpen}>
        Add Bookmark
      </Button>
      <Dialog
        PaperProps={{
          sx: { backgroundColor: "grey", width: "30%", height: "100%" },
        }}
        className={styles.lvDialog}
        open={open}
        onClose={handleClose}
      >
        <DialogTitle>Add Bookmark</DialogTitle>
        <DialogContent>
          <form onSubmit={formik.handleSubmit}>
            <TextField
              id="url"
              className={styles.input}
              type="text"
              placeholder="Enter url"
              value={formik.values.url}
              // error={formik.touched.url && Boolean(formik.errors.url)}
              onBlur={handleBlur}
              onChange={handleChange}
            />
            <TextField
              id="title"
              className={styles.input}
              placeholder="Enter title"
              value={formik.values.title}
              // error={formik.touched.title && Boolean(formik.errors.title)}
              onBlur={handleBlur}
              onChange={handleChange}
            />
            <TextField
              id="tags"
              className={styles.input}
              placeholder="Enter tag(s)"
              value={formik.values.tags}
              // error={formik.touched.tags && Boolean(formik.errors.tags)}
              onBlur={handleBlur}
              onChange={handleChange}
            />
            <Button color="primary" variant="contained" type="submit">
              Create
            </Button>
          </form>
        </DialogContent>
        {/*<DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handleClose}>Add</Button>
        </DialogActions>*/}
      </Dialog>
    </div>
  );
}
